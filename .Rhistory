overlap <- FALSE
for (existing_group in existing_groups) {
if (length(intersect(current_group, existing_group)) > 0) {
overlap <- TRUE
break
}
}
return(!overlap)
}
# Initialize an empty list to hold the non-overlapping groups
non_overlapping_groups <- list()
# Iterate over each group
for (current_group in IBD_Struc_list) {
# If the current group does not overlap with any group in the non_overlapping_groups list, add it to the list
if (check_overlap(current_group, non_overlapping_groups)) {
non_overlapping_groups <- c(non_overlapping_groups, list(current_group))
}
}
names(non_overlapping_groups) <- paste0("cd", seq_along(non_overlapping_groups))
SG[[2]]=non_overlapping_groups
return(SG)
}
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
SG=SGs[[4]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
rm(list = ls())
library(igraph)
odd=30
chr=22
rep=98
SGs=readRDS(paste0("/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR", odd, "/Smsg/Smsg_chr", chr, "rep", rep, "_SGList.RData"))
clsFileNameWithPath=paste0( "/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR30/Dash_clusters/IBDCls_chr", chr, "rep", rep, "_D0.6_Min2hap.hcl" )
IBDClusters=read.table(clsFileNameWithPath, col.names = paste0("V",seq_len(2*2*10000+3)), fill=T)
IBDClusters=IBDClusters[, colSums(is.na(IBDClusters)) != nrow(IBDClusters)]
SG=SGs[[4]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
Disj_Clst_SG_Bigger=function(SG, IBDClusters){
columns_to_remove <- seq(4, ncol(IBDClusters), by = 2)
IBDClusters <- IBDClusters[, -columns_to_remove]
IBD_Struc=SG[[2]]
IBDClusters=IBDClusters[IBDClusters[,1] %in%IBD_Struc,]
IBD_Struc_list <- lapply(1:nrow(IBDClusters), function(i){
# Get the name for the list element from the first column
element_name <- as.character(IBDClusters[i, 1])
# Get the elements from column 4 to the end, excluding NA values
elements <- IBDClusters[i, 4:ncol(IBDClusters)]
elements <- elements[!is.na(elements)]
gsub(" ", "", elements)
} )
names(IBD_Struc_list)=IBD_Struc
# Create a function to check for overlaps
check_overlap <- function(current_group, existing_groups) {
overlap <- FALSE
for (existing_group in existing_groups) {
if (length(intersect(current_group, existing_group)) > 0) {
overlap <- TRUE
break
}
}
return(!overlap)
}
# Initialize an empty list to hold the non-overlapping groups
non_overlapping_groups <- list()
# Iterate over each group
for (current_group in IBD_Struc_list) {
# If the current group does not overlap with any group in the non_overlapping_groups list, add it to the list
if (check_overlap(current_group, non_overlapping_groups)) {
non_overlapping_groups <- c(non_overlapping_groups, list(current_group))
}
}
names(non_overlapping_groups) <- paste0("cd", seq_along(non_overlapping_groups))
SG[[2]]=non_overlapping_groups
return(SG)
}
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
columns_to_remove <- seq(4, ncol(IBDClusters), by = 2)
IBDClusters <- IBDClusters[, -columns_to_remove]
IBD_Struc=SG[[2]]
IBD_Struc
IBDClusters=IBDClusters[IBDClusters[,1] %in%IBD_Struc,]
IBD_Struc_list <- lapply(1:nrow(IBDClusters), function(i){
# Get the name for the list element from the first column
element_name <- as.character(IBDClusters[i, 1])
# Get the elements from column 4 to the end, excluding NA values
elements <- IBDClusters[i, 4:ncol(IBDClusters)]
elements <- elements[!is.na(elements)]
gsub(" ", "", elements)
} )
names(IBD_Struc_list)=IBD_Struc
IBD_Struc_list
Disj_Clst_SG_Bigger=function(SG, IBDClusters){
columns_to_remove <- seq(4, ncol(IBDClusters), by = 2)
IBDClusters <- IBDClusters[, -columns_to_remove]
IBD_Struc=SG[[2]]
IBDClusters=IBDClusters[IBDClusters[,1] %in%IBD_Struc,]
IBD_Struc_list <- lapply(1:nrow(IBDClusters), function(i){
# Get the name for the list element from the first column
element_name <- as.character(IBDClusters[i, 1])
# Get the elements from column 4 to the end, excluding NA values
elements <- IBDClusters[i, 4:ncol(IBDClusters)]
elements <- elements[!is.na(elements)]
gsub(" ", "", elements)
} )
names(IBD_Struc_list)=IBD_Struc
IBD_Struc_list <- IBD_Struc_list[order(sapply(IBD_Struc_list, length), decreasing = TRUE)]
# Create a function to check for overlaps
check_overlap <- function(current_group, existing_groups) {
overlap <- FALSE
for (existing_group in existing_groups) {
if (length(intersect(current_group, existing_group)) > 0) {
overlap <- TRUE
break
}
}
return(!overlap)
}
# Initialize an empty list to hold the non-overlapping groups
non_overlapping_groups <- list()
# Iterate over each group
for (current_group in IBD_Struc_list) {
# If the current group does not overlap with any group in the non_overlapping_groups list, add it to the list
if (check_overlap(current_group, non_overlapping_groups)) {
non_overlapping_groups <- c(non_overlapping_groups, list(current_group))
}
}
names(non_overlapping_groups) <- paste0("cd", seq_along(non_overlapping_groups))
SG[[2]]=non_overlapping_groups
return(SG)
}
rm(list = ls())
library(igraph)
odd=30
chr=22
rep=98
SGs=readRDS(paste0("/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR", odd, "/Smsg/Smsg_chr", chr, "rep", rep, "_SGList.RData"))
clsFileNameWithPath=paste0( "/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR30/Dash_clusters/IBDCls_chr", chr, "rep", rep, "_D0.6_Min2hap.hcl" )
IBDClusters=read.table(clsFileNameWithPath, col.names = paste0("V",seq_len(2*2*10000+3)), fill=T)
IBDClusters=IBDClusters[, colSums(is.na(IBDClusters)) != nrow(IBDClusters)]
SG=SGs[[4]]
Disj_Clst_SG_Bigger=function(SG, IBDClusters){
columns_to_remove <- seq(4, ncol(IBDClusters), by = 2)
IBDClusters <- IBDClusters[, -columns_to_remove]
IBD_Struc=SG[[2]]
IBDClusters=IBDClusters[IBDClusters[,1] %in%IBD_Struc,]
IBD_Struc_list <- lapply(1:nrow(IBDClusters), function(i){
# Get the name for the list element from the first column
element_name <- as.character(IBDClusters[i, 1])
# Get the elements from column 4 to the end, excluding NA values
elements <- IBDClusters[i, 4:ncol(IBDClusters)]
elements <- elements[!is.na(elements)]
gsub(" ", "", elements)
} )
names(IBD_Struc_list)=IBD_Struc
IBD_Struc_list <- IBD_Struc_list[order(sapply(IBD_Struc_list, length), decreasing = TRUE)]
# Create a function to check for overlaps
check_overlap <- function(current_group, existing_groups) {
overlap <- FALSE
for (existing_group in existing_groups) {
if (length(intersect(current_group, existing_group)) > 0) {
overlap <- TRUE
break
}
}
return(!overlap)
}
# Initialize an empty list to hold the non-overlapping groups
non_overlapping_groups <- list()
# Iterate over each group
for (current_group in IBD_Struc_list) {
# If the current group does not overlap with any group in the non_overlapping_groups list, add it to the list
if (check_overlap(current_group, non_overlapping_groups)) {
non_overlapping_groups <- c(non_overlapping_groups, list(current_group))
}
}
names(non_overlapping_groups) <- paste0("cd", seq_along(non_overlapping_groups))
SG[[2]]=non_overlapping_groups
return(SG)
}
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
SG=SGs[[10]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
SG=SGs[[30]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
SG=SGs[[2]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
SG=SGs[[3]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
SG=SGs[[5]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
SG=SGs[[6]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
SG=SGs[[7]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
SG=SGs[[8]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
SG=SGs[[9]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
SG=SGs[[10]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
SG=SGs[[11]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
SG=SGs[[12]]
Disj_Clst_SG(SG, IBDClusters)
Disj_Clst_SG_Bigger(SG, IBDClusters)
length(SGs)
x1=Disj_Clst_SG(SG, IBDClusters)
x1[[2]]
length(x1[[2]])
sapply(x1[[2]], length)
max(sapply(x1[[2]], length))
max(sapply(x2[[2]], length))
for (i in 1:length(SGs)) {
SG=SGs[[i]]
x1=Disj_Clst_SG(SG, IBDClusters)
x2=Disj_Clst_SG_Bigger(SG, IBDClusters)
if (max(sapply(x1[[2]], length)) != max(sapply(x2[[2]], length))) {
cet("\n i=", i)
break
}
}
odd=30
chr=1
rep=98
SGs=readRDS(paste0("/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR", odd, "/Smsg/Smsg_chr", chr, "rep", rep, "_SGList.RData"))
clsFileNameWithPath=paste0( "/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR30/Dash_clusters/IBDCls_chr", chr, "rep", rep, "_D0.6_Min2hap.hcl" )
IBDClusters=read.table(clsFileNameWithPath, col.names = paste0("V",seq_len(2*2*10000+3)), fill=T)
IBDClusters=IBDClusters[, colSums(is.na(IBDClusters)) != nrow(IBDClusters)]
for (i in 1:length(SGs)) {
SG=SGs[[i]]
x1=Disj_Clst_SG(SG, IBDClusters)
x2=Disj_Clst_SG_Bigger(SG, IBDClusters)
if (max(sapply(x1[[2]], length)) != max(sapply(x2[[2]], length))) {
cet("\n i=", i)
break
}
}
for (i in 1:length(SGs)) {
SG=SGs[[i]]
x1=Disj_Clst_SG(SG, IBDClusters)
x2=Disj_Clst_SG_Bigger(SG, IBDClusters)
if (max(sapply(x1[[2]], length)) != max(sapply(x2[[2]], length))) {
cat("\n i=", i)
break
}
}
x1[[2]]
x2[[2]]
i
x2[[1]]
x1[[1]]
columns_to_remove <- seq(4, ncol(IBDClusters), by = 2)
IBDClusters <- IBDClusters[, -columns_to_remove]
IBD_Struc=SG[[2]]
IBDClusters=IBDClusters[IBDClusters[,1] %in%IBD_Struc,]
IBD_Struc_list <- lapply(1:nrow(IBDClusters), function(i){
# Get the name for the list element from the first column
element_name <- as.character(IBDClusters[i, 1])
# Get the elements from column 4 to the end, excluding NA values
elements <- IBDClusters[i, 4:ncol(IBDClusters)]
elements <- elements[!is.na(elements)]
gsub(" ", "", elements)
} )
names(IBD_Struc_list)=IBD_Struc
IBD_Struc_list
x1[[2]]
IBD_Struc_list <- IBD_Struc_list[order(sapply(IBD_Struc_list, length), decreasing = TRUE)]
# Create a function to check for overlaps
check_overlap <- function(current_group, existing_groups) {
overlap <- FALSE
for (existing_group in existing_groups) {
if (length(intersect(current_group, existing_group)) > 0) {
overlap <- TRUE
break
}
}
return(!overlap)
}
# Initialize an empty list to hold the non-overlapping groups
non_overlapping_groups <- list()
# Iterate over each group
for (current_group in IBD_Struc_list) {
# If the current group does not overlap with any group in the non_overlapping_groups list, add it to the list
if (check_overlap(current_group, non_overlapping_groups)) {
non_overlapping_groups <- c(non_overlapping_groups, list(current_group))
}
}
non_overlapping_groups
library(devtools)
R.version
library(devtools)
use_r("Disj_Clst_SG_Bigger")
library(FounderRare)
?Disj_Clst_SG_Bigger
?Disj_Clst_SG_Bigger
library(FounderRare)
?Disj_Clst_SG_Bigger
?Disj_Clst_SG
devtools::load_all("MyPackages/FounderRare/.")
library(FounderRare)
?Disj_Clst_SG
?Disj_Clst_SG
?Disj_Clst_SG
library(devtools)
use_r("TBMD")
setwd(/lustre03/project/6033529/genealogy_sims/results/Samir/MyPackages/FounderRare/)
setwd("/lustre03/project/6033529/genealogy_sims/results/Samir/MyPackages/FounderRare/")
use_r("TBMD")
disjM="Bigger"
if (disjM=="Bigger") {
cat("\n disjM==Bigger \n")
} else {
if (disjM != "Merge") {
cat("\n The disjM parameter is not correct \n")
break
}
cat("\n disjM==Bigger \n")
}
disjM="Bigg"
if (disjM=="Bigger") {
cat("\n disjM==Bigger \n")
} else {
if (disjM != "Merge") {
cat("\n The disjM parameter is not correct \n")
break
}
cat("\n disjM==Bigger \n")
}
stop("\n The disjM parameter is not correct \n")
if (disjM=="Bigger") {
cat("\n disjM==Bigger \n")
} else {
if (disjM != "Merge") {
stop("\n The disjM parameter is not correct \n")
}
cat("\n disjM==Merge \n")
}
disjM="Merge"
if (disjM=="Bigger") {
cat("\n disjM==Bigger \n")
} else {
if (disjM != "Merge") {
stop("\n The disjM parameter is not correct \n")
}
cat("\n disjM==Merge \n")
}
devtools::load_all(".")
library(FounderRare)
rm(list = ls())
library(igraph)
odd=30
chr=21
rep=98
SGs=readRDS(paste0("/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR", odd, "/Smsg/Smsg_chr", chr, "rep", rep, "_SGList.RData"))
clsFileNameWithPath=paste0( "/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR30/Dash_clusters/IBDCls_chr", chr, "rep", rep, "_D0.6_Min2hap.hcl" )
IBDClusters=read.table(clsFileNameWithPath, col.names = paste0("V",seq_len(2*2*10000+3)), fill=T)
IBDClusters=IBDClusters[, colSums(is.na(IBDClusters)) != nrow(IBDClusters)]
for (i in 1:length(SGs)) {
SG=SGs[[i]]
x1=Disj_Clst_SG(SG, IBDClusters)
x2=Disj_Clst_SG_Bigger(SG, IBDClusters)
if (max(sapply(x1[[2]], length)) != max(sapply(x2[[2]], length))) {
cat("\n i=", i)
break
}
}
x1[[1]]
x2[[1]]
x1[[2]]
x2[[2]]
?TBMD
library(FounderRare)
?TBMD
?TBMD()
?TBMD
TBMD
/lustre03/project/6033529/genealogy_sims/results/Samir/MyPackages/FounderRare/R/TBMD.R
devtools::load_all(".")
rm(list = ls())
library(FounderRare)
?TBMD
library(devtools)
use_r("TBMD")
library(FounderRare)
library(FounderRare)
odd=30
chr=21
rep=98
SGs=readRDS(paste0("/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR", odd, "/Smsg/Smsg_chr", chr, "rep", rep, "_SGList.RData"))
clsFileNameWithPath=paste0( "/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR30/Dash_clusters/IBDCls_chr", chr, "rep", rep, "_D0.6_Min2hap.hcl" )
IBDClusters=read.table(clsFileNameWithPath, col.names = paste0("V",seq_len(2*2*10000+3)), fill=T)
IBDClusters=IBDClusters[, colSums(is.na(IBDClusters)) != nrow(IBDClusters)]
for (i in 1:length(SGs)) {
SG=SGs[[i]]
x1=Disj_Clst_SG(SG, IBDClusters)
x2=Disj_Clst_SG_Bigger(SG, IBDClusters)
if (max(sapply(x1[[2]], length)) != max(sapply(x2[[2]], length))) {
cat("\n i=", i)
break
}
}
library(GenomicRanges)
library(FounderRare)
odd=30
chr=21
rep=98
SGs=readRDS(paste0("/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR", odd, "/Smsg/Smsg_chr", chr, "rep", rep, "_SGList.RData"))
clsFileNameWithPath=paste0( "/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR30/Dash_clusters/IBDCls_chr", chr, "rep", rep, "_D0.6_Min2hap.hcl" )
IBDClusters=read.table(clsFileNameWithPath, col.names = paste0("V",seq_len(2*2*10000+3)), fill=T)
IBDClusters=IBDClusters[, colSums(is.na(IBDClusters)) != nrow(IBDClusters)]
for (i in 1:length(SGs)) {
SG=SGs[[i]]
x1=Disj_Clst_SG(SG, IBDClusters)
x2=Disj_Clst_SG_Bigger(SG, IBDClusters)
if (max(sapply(x1[[2]], length)) != max(sapply(x2[[2]], length))) {
cat("\n i=", i)
break
}
}
library(igraph)
for (i in 1:length(SGs)) {
SG=SGs[[i]]
x1=Disj_Clst_SG(SG, IBDClusters)
x2=Disj_Clst_SG_Bigger(SG, IBDClusters)
if (max(sapply(x1[[2]], length)) != max(sapply(x2[[2]], length))) {
cat("\n i=", i)
break
}
}
devtools::load_all("MyPackages/FounderRare/.")
library(devtools)
?TBMD()
devtools::load_all("MyPackages/FounderRare/.")
library(FounderRare)
?TBMD()
rm(list = ls())
library(igraph)
library(GenomicRanges)
library(FounderRare)
odd=30
chr=21
rep=98
SGs=readRDS(paste0("/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR", odd, "/Smsg/Smsg_chr", chr, "rep", rep, "_SGList.RData"))
clsFileNameWithPath=paste0( "/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR30/Dash_clusters/IBDCls_chr", chr, "rep", rep, "_D0.6_Min2hap.hcl" )
IBDClusters=read.table(clsFileNameWithPath, col.names = paste0("V",seq_len(2*2*10000+3)), fill=T)
IBDClusters=IBDClusters[, colSums(is.na(IBDClusters)) != nrow(IBDClusters)]
for (i in 1:length(SGs)) {
SG=SGs[[i]]
x1=Disj_Clst_SG(SG, IBDClusters)
x2=Disj_Clst_SG_Bigger(SG, IBDClusters)
if (max(sapply(x1[[2]], length)) != max(sapply(x2[[2]], length))) {
cat("\n i=", i)
break
}
}
xx=TBMD()
?TBMD()
x1[[2]]
SGs_CD[i]
SGs_CD=readRDS(paste0("/lustre03/project/6033529/genealogy_sims/results/Samir/Sims_power/Smsg_100reps/H1_OR", odd, "/Smsg/Smsg_chr", chr, "rep", rep, "_SGList_CD.RData"))
SGs_CD[i]
xx1=TBMD(SGs, IBDClusters, disjM = "Merge", remove = TRUE)
xx1[i]
class(xx1[i])
identical(xx1[i], x1[i])
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
x1[i]
x1[[2]]
x1
identical(xx1[i], x1)
xx1[i]
identical(xx1[[i]][[2]], x1[[2]])
xx2=TBMD(SGs, IBDClusters, disjM = "Bigg", remove = TRUE)
xx2=TBMD(SGs, IBDClusters, disjM = "Bigger", remove = TRUE)
identical(xx1[[i]][[2]], x1[[2]])
identical(xx2[[i]][[2]], x1[[2]])
identical(xx2[[i]][[2]], x2[[2]])
for (i in 1:length(xx1)) {
if (!identical(xx1[[i]][[2]],xx2[[i]][[2]])) {
cat("\n i=", i)
}
for (i in 1:length(xx1)) {
if (!identical(xx1[[i]][[2]],xx2[[i]][[2]])) {
cat("\n i=", i)
}
}
}
for (i in 1:length(xx1)) {
if (!identical(xx1[[i]][[2]],xx2[[i]][[2]])) {
cat("\n i=", i)
}
}
xx1[[2]][[2]]
xx2[[2]][[2]]
devtools::load_all("MyPackages/FounderRare/.")
library(FounderRare)
devtools::load_all("MyPackages/FounderRare/.")
